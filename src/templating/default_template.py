import tomllib

_TOML_DATA = R"""
[device]
include = '''
#include "${device.name.lower()}\${device.name.lower()}.h"
'''

[device.header]
bottom = '''
#ifdef __cplusplus
}
#endif
#endif // ${device.name.upper()}_H_
'''
top = '''
/**
* @file
* @version ${device.version}
* @brief Register access structs for ${device.vendor} ${device.name}
*
* ${device.description}
*
* @note This file is autogenerated using register-code-gen
*/

#ifndef ${device.name.upper()}_H_
#define ${device.name.upper()}_H_

#ifdef __cplusplus
extern "C" {
#endif

'''

[peripheral]
declaration = '''
extern ${templates.peripheral.type} volatile * ${peripheral.name.upper()};
'''
definition = '''
${templates.peripheral.type} volatile * ${peripheral.name.upper()} = (void *) (0x${peripheral.base_address:08X}UL);
'''
include = '''
#include "${device.name.lower()}\${peripheral.name.lower()}.h"
'''
struct = '${peripheral.derived_from.name.upper()}_peripheral_registers_s'
type = '${peripheral.derived_from.name.upper()}_peripheral_registers_t'

[peripheral.header]
bottom = '''
#ifdef __cplusplus
}
#endif
#endif // ${peripheral.name.upper()}_H_
'''
top = '''
/**
* @file
* @version ${device.version}
* @brief Register access structs for ${device.vendor} ${peripheral.name}
*
* ${peripheral.description}
*
* @note This file is autogenerated using register-code-gen
*/

#ifndef ${peripheral.name.upper()}_H_
#define ${peripheral.name.upper()}_H_

#ifdef __cplusplus
extern "C" {
#endif

#include "static_assert.h"

#include <stdint.h>

'''

[peripheral.structure]
top = '''
/**
* ${peripheral.description}
*/
typedef struct ${templates.peripheral.struct} {
'''

bottom = '''
} ${templates.peripheral.type};
'''

reserved = '''
uint8_t const reserved_0x${offset:02X}[${size}];
'''

[register]

definition = '''
///${register.description}
${peripheral.name.upper()}_${register.name.lower()}_t ${register.name.lower()};
'''

offset_assert = '''
STATIC_ASSERT_MEMBER_OFFSET(${templates.peripheral.type}, ${register.name.lower()}, 0x${register.address_offset:02X});
'''
size_assert = '''
STATIC_ASSERT_TYPE_SIZE(${templates.register.type}, sizeof(uint${register.size}_t));
'''
type='${peripheral.name.upper()}_${register.name.lower()}_t'
union='${peripheral.name.upper()}_${register.name.lower()}_u'

[register.structure]
top = '''
/**
* ${register.description}
*/
typedef union ${templates.register.union} {
struct {
'''

bottom = '''
};
uint{register.size}_t bits;
} ${templates.register.type};
'''

reserved = '''
uint${register.size}_t const reserved_${offset:02}:${width};
'''

[field]
enum_definition='''
/// ${field.description}
${templates.enum.type} ${const} ${field.name.lower()}:${field.bit_width};
'''
int_definition='''
/// ${field.description}
uint${register.size}_t ${const} ${field.name.lower()}:${field.bit_width};
'''

[enum]
type='${peripheral.name.upper()}_${field.name.lower()}_t'
enum='${peripheral.name.upper()}_${field.name.lower()}_e'

value='''
/// ${enum.description}
${peripheral.name.upper()}_${field.name.lower()}_${enum.name.lower()} = 0x${enum.value:0X},
'''

[enum.definition]
top='''
/**
* ${field.description}
*/
typedef enum ${templates.enum.enum} {
'''

bottom='''
} ${templates.enum.type};
'''
"""


def default_templates():
    return tomllib.loads(_TOML_DATA)
